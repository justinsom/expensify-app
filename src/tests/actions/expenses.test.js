import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

import { addExpense, startAddExpense, editExpense, removeExpense } from '../../actions/expenses';
import expenses from '../fixtures/expenses';
import database from '../../firebase/firebase';


const createMockStore = configureMockStore([thunk]);

test('should setup remove expense action object', () => {
  const action = removeExpense({ id: '123abc' });
  expect(action).toEqual({
    type: 'REMOVE_EXPENSE',
    id: '123abc'
  });
});

test('should setup edit expense action object', () => {
  const action = editExpense('123abc', { note: 'New note value' });
  expect(action).toEqual({
    type: 'EDIT_EXPENSE',
    id: '123abc',
    updates: {
      note: 'New note value'
    }
  });
});

test('should setup add expense action object with provided values', () => {
  const action = addExpense(expenses[2]);
  expect(action).toEqual({
    type: 'ADD_EXPENSE',
    expense: expenses[2]
  });
});

test('should add expense to database and store', (done) => {
  const mockStore = createMockStore({});

  const expenseData = {
    description: 'Mouse', 
    amount: 3000,
    note: 'This one is better', 
    createdAt: 1000
  }

  mockStore.dispatch(startAddExpense(expenseData))
    .then(() => {
      const actions = mockStore.getActions();

      expect(actions[0]).toEqual({
        type: 'ADD_EXPENSE', 
        expense: {
          id: expect.any(String), 
          ...expenseData
        }
      });

      // Returned as promise
      return database.ref(`expenses/${actions[0].expense.id}`)  // id generated by firebase
        .once('value');
    })
    .then((snapshot) => {   // revolse of the 'return' Promise above
      expect(snapshot.val()).toEqual(expenseData);
      done();   // JEST will wait for this command before declaring test a pass or fail; used for async functionality
    });
});


test('should add expense with defaults to database and store', () => {
  const mockStore = createMockStore({});

  const expenseData = {
    description: '',
    amount: 0,
    note: '',
    createdAt: 0
  }

  mockStore.dispatch(startAddExpense({}))
    .then(() => {
      const actions = mockStore.getActions();

      expect(actions[0]).toEqual({
        type: 'ADD_EXPENSE', 
        expense: {
          id: expect.any(String), 
          ...expenseData
        }
      });

      // Returned as promise
      return database.ref(`expenses/${actions[0].expense.id}`)  // id generated by firebase
        .once('value');
    })
    .then((snapshot) => {   // resolve of the 'return' Promise above
      expect(snapshot.val()).toEqual(expenseData);
      done();   // JEST will wait for this command before declaring test a pass or fail; used for async functionality
    });
});


// test('should setup add expense action object with default values', () => {
//   const action = addExpense();
//   expect(action).toEqual({
//     type: 'ADD_EXPENSE',
//     expense: {
//       id: expect.any(String),
//       description: '',
//       note: '',
//       amount: 0,
//       createdAt: 0
//     }
//   });
// });
